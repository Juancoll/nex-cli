// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do one of these:
//
//    using QuickType;
//
//    var modelComponent = ModelComponent.FromJson(jsonString);
//    var model = Model.FromJson(jsonString);
//    var user = User.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Model
    {
        [JsonProperty("_id")]
        public object Id { get; set; }

        [JsonProperty("_type")]
        public string Type { get; set; }

        [JsonProperty("components")]
        public ModelComponent[] Components { get; set; }

        [JsonProperty("createdAt")]
        public double CreatedAt { get; set; }

        [JsonProperty("enabled")]
        public bool Enabled { get; set; }

        [JsonProperty("updatedAt")]
        public double UpdatedAt { get; set; }
    }

    public partial class ModelComponent
    {
        [JsonProperty("_type")]
        public string Type { get; set; }

        [JsonProperty("data")]
        public object Data { get; set; }
    }

    public partial class User
    {
        [JsonProperty("_id")]
        public object Id { get; set; }

        [JsonProperty("_type")]
        public string Type { get; set; }

        [JsonProperty("components")]
        public ModelComponent[] Components { get; set; }

        [JsonProperty("createdAt")]
        public double CreatedAt { get; set; }

        [JsonProperty("enabled")]
        public bool Enabled { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("updatedAt")]
        public double UpdatedAt { get; set; }
    }

    public partial class ModelComponent
    {
        public static ModelComponent FromJson(string json) => JsonConvert.DeserializeObject<ModelComponent>(json, QuickType.Converter.Settings);
    }

    public partial class Model
    {
        public static Model FromJson(string json) => JsonConvert.DeserializeObject<Model>(json, QuickType.Converter.Settings);
    }

    public partial class User
    {
        public static User FromJson(string json) => JsonConvert.DeserializeObject<User>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ModelComponent self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this Model self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
        public static string ToJson(this User self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
